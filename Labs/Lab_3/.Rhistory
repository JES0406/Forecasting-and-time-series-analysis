include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(2,1,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
## Load dataset -------------------------------------------------------------------------------------------------------
fdata<-read.table("ARIMA_02.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
ggtsdisplay(y,lag.max = 50)
# Box-Cox transformation
Lambda <- BoxCox.lambda.plot(y,TT)
z <- BoxCox(y,Lambda)
# Differentiation: if the ACF decreases very slowly -> needs differenciation
ggtsdisplay(z,lag.max = 100)
# If differencing is needed
Bz <- diff(z,differences = 1)
ggtsdisplay(Bz,lag.max = 100) #differences contains the order of differentiation
# Seasonal Differentiation
# If differencing is needed
B12Bz <- diff(Bz, lag = TT, differences = 1)
B12 <- diff(z, lag = TT, differences = 1)
# ACF and PACF of the time series -> identify significant lags and order
ggtsdisplay(B12Bz,lag.max = 100)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(0,1,0),
seasonal = list(order=c(2,1,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(2,1,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(2,1,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(2,1,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(2,1,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(2,1,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(2,1,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(2,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(1,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(1,1,1),
seasonal = list(order=c(1,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(1,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(2,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(1,1,1),
seasonal = list(order=c(2,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(2,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(1,1,1),
seasonal = list(order=c(2,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
## Load dataset -------------------------------------------------------------------------------------------------------
fdata<-read.table("ARIMA_04.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
ggtsdisplay(y,lag.max = 50)
# Box-Cox transformation
Lambda <- BoxCox.lambda.plot(y,TT)
z <- BoxCox(y,Lambda)
# Differentiation: if the ACF decreases very slowly -> needs differenciation
ggtsdisplay(z,lag.max = 100)
# If differencing is needed
Bz <- diff(z,differences = 1)
ggtsdisplay(Bz,lag.max = 100) #differences contains the order of differentiation
# Seasonal Differentiation
# If differencing is needed
B12Bz <- diff(Bz, lag = TT, differences = 1)
# ACF and PACF of the time series -> identify significant lags and order
ggtsdisplay(B12Bz,lag.max = 100)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(0,1,0),
seasonal = list(order=c(2,0,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
# ACF and PACF of the time series -> identify significant lags and order
ggtsdisplay(B12Bz,lag.max = 100)
ggtsdisplay(Bz,lag.max = 100) #differences contains the order of differentiation
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(0,1,0),
seasonal = list(order=c(1,0,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(1,0,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,1),
seasonal = list(order=c(1,0,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(1,0,0), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(1,0,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(0,0,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(0,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(1,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Fit seasonal model with estimated order
arima.fit <- Arima(y,
order=c(2,1,0),
seasonal = list(order=c(2,1,1), period=TT),
lambda = Lambda,
include.constant = FALSE)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit), lag.max = 20)
fdata<-read.table("ARIMA_04.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
y[0] <- 1000
ggtsdisplay(y,lag.max = 50)
head(y)
y[1] <- 1000
ggtsdisplay(y,lag.max = 50)
y[2] <- 1000
ggtsdisplay(y,lag.max = 50)
y[50] <- 1000
ggtsdisplay(y,lag.max = 50)
fdata<-read.table("ARIMA_04.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
head(y)
y[50] <- 1000
ggtsdisplay(y,lag.max = 50)
y[50] <- (y[49] + y[51])/2
ggtsdisplay(y,lag.max = 50)
index <- 50
y[index] <- (y[index-1] + y[index+1])/2
ggtsdisplay(y,lag.max = 50)
fdata<-read.table("ARIMA_04.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
head(y)
y[50] <- 1000
index <- 50
y[index] <- (y[index-1] + y[index+1])/2
ggtsdisplay(y,lag.max = 50)
ggtsdisplay(y,lag.max = 50)
index <- 50
y[index] <- (y[index-1] + y[index+1])/2
ggtsdisplay(y,lag.max = 50)
fdata<-read.table("ARIMA_04.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
head(y)
y[50] <- 1000
ggtsdisplay(y,lag.max = 50)
install.packages("tsoutliers")
library(tsoutliers)
fdata<-read.table("ARIMA_04.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
head(y)
y[50] <- 1000
ggtsdisplay(y,lag.max = 50)
outliers
outliers <- tso(y)
fdata<-read.table("ARIMA_04.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
head(y)
y[51] <- 1000
ggtsdisplay(y,lag.max = 50)
q1 <- quantile(y, 0.25)
q3 <- quantile(y, 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
# Identify outliers
y.outliers <- which(y < lower_bound | y > upper_bound)
print(y.outliers)
outliers
fdata<-read.table("ARIMA_04.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
head(y)
y[51] <- 1000
ggtsdisplay(y,lag.max = 50)
q1 <- quantile(y, 0.25)
q3 <- quantile(y, 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
# Identify outliers
outliers <- which(y < lower_bound | y > upper_bound)
outliers
q1 <- quantile(y, 0.05)
q3 <- quantile(y, 0.95)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
# Identify outliers
outliers <- which(y < lower_bound | y > upper_bound)
outliers
q1 <- quantile(y, 0.01)
q3 <- quantile(y, 0.99)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
# Identify outliers
outliers <- which(y < lower_bound | y > upper_bound)
outliers
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("C:/Users/javie/Desktop/Tercero/Analisis/Utils/Detect_outliers.R")
# Perform future forecast
y_est <- forecast(arima.fit, h=12)
autoplot(y_est)
library(MLTools)
library(fpp2)
library(ggplot2)
library(readxl)
library(lmtest)  #contains coeftest function
library(tseries) #contains adf.test function
## Load dataset -------------------------------------------------------------------------------------------------------
fdata<-read.table("C:/Users/rodri/Documents/3 IMAT/Cuatri 1/Forecasting/SARIMA/ARIMA_06.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
ggtsdisplay(y,lag.max = 50)
## Training and validation ------------------------------------------------------------
y.TR <- subset(y, end = 1000)
y.TV <- subset(y, start = 1000)
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
Lambda <- BoxCox.lambda.plot(y.TR,TT)
z <- BoxCox(y.TR,Lambda)
ggtsdisplay(z,lag.max = 100)
# If differencing is needed
z.sdiff <- diff(z,lag=TT,differences = 1)
ggtsdisplay(z.sdiff,lag.max = 100) #differences contains the order of differentiation
# If differencing is needed
z.rdiff <- diff(z, differences = 1)
ggtsdisplay(z.rdiff,lag.max = 100)
# Both
z.rdiff.sdiff <- diff(z.rdiff,lag=TT,differences = 2)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
# Fit seasonal model with estimated order
arima.fit <- Arima(y.TR,
order=c(1,1,1),
seasonal = list(order=c(0,2,1), period=TT),
lambda = Lambda)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
library(MLTools)
library(fpp2)
library(ggplot2)
library(readxl)
library(lmtest)  #contains coeftest function
library(tseries) #contains adf.test function
## Load dataset -------------------------------------------------------------------------------------------------------
fdata<-read.table("C:/Users/rodri/Documents/3 IMAT/Cuatri 1/Forecasting/SARIMA/ARIMA_06.dat", sep = "")
## Load dataset -------------------------------------------------------------------------------------------------------
fdata<-read.table("ARIMA_06.dat", sep = "")
TT <-  12
y <- ts(fdata, frequency = TT)
ggtsdisplay(y,lag.max = 50)
## Training and validation ------------------------------------------------------------
y.TR <- subset(y, end = 1000)
y.TV <- subset(y, start = 1000)
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
Lambda <- BoxCox.lambda.plot(y.TR,TT)
z <- BoxCox(y.TR,Lambda)
ggtsdisplay(z,lag.max = 100)
# If differencing is needed
z.sdiff <- diff(z,lag=TT,differences = 1)
ggtsdisplay(z.sdiff,lag.max = 100) #differences contains the order of differentiation
# If differencing is needed
z.rdiff <- diff(z, differences = 1)
ggtsdisplay(z.rdiff,lag.max = 100)
# Both
z.rdiff.sdiff <- diff(z.rdiff,lag=TT,differences = 2)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
# Fit seasonal model with estimated order
arima.fit <- Arima(y.TR,
order=c(1,1,1),
seasonal = list(order=c(0,2,1), period=TT),
lambda = Lambda)
#summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
# Check fitted forecast
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
# Perform future forecast
y_est <- forecast(arima.fit, h=12)
autoplot(y_est)
# Autoarima
auto.arima(y.TR,trace=TRUE)
# Autoarima
auto.arima(ts, stepwise = TRUE, approximation = FALSE, trace = TRUE, max.d = 1)
# Autoarima
auto.arima(ts, stepwise = TRUE, approximation = FALSE, trace = TRUE, max.d = 1)
# Autoarima
auto.arima(y, stepwise = TRUE, approximation = FALSE, trace = TRUE, max.d = 1)
# Autoarima
auto.arima(y, stepwise = TRUE, approximation = FALSE, trace = TRUE, max.d = 1, max.p = 3)
