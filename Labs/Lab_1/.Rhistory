seasonal = list(order=c(0, 1, 1), period=12),
lambda = Lambda,
include.constant = FALSE)
summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=100)
# If residuals are not white noise, change order of ARMA
ggtsdisplay(residuals(arima.fit),lag.max = 100)
# Check fitted
autoplot(y.TR, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
ggtsdisplay(residuals(arima.fit),lag.max = 100)
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
fdata<-read.csv("C:/Users/javie/Desktop/Tercero/Analisis/Exams/data/fdata18.csv")
head(fdata)
TT <- 12
y <- ts(fdata, frequency = TT)[, 1]
head(y)
ggtsdisplay(y,lag.max = 50)
y.TR <- subset(y, end = 541)
y.TV <- subset(y, start = 541)
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
ggtsdisplay(y.TR,lag.max = 50)
Lambda <- BoxCox.lambda.plot(y.TR,TT)
z <- BoxCox(y.TR,Lambda)
ggtsdisplay(z,lag.max = 100)
z.sdiff <- diff(z,lag=TT,differences = 1)
ggtsdisplay(z.sdiff,lag.max = 100) #differences contains the order of differentiation
z.rdiff <- diff(z, differences = 1)
ggtsdisplay(z.rdiff,lag.max = 100)
z.rdiff.sdiff <- diff(z.rdiff,lag=TT,differences = 1)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
arima.fit <- Arima(y.TR,
order=c(1,1,1),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
ggtsdisplay(residuals(arima.fit),lag.max = 100)
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
autoplot(y.TR, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
# Check fitted
autoplot(y.TR, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
library(MLTools)
library(fpp2)
library(ggplot2)
library(readxl)
library(lmtest)  #contains coeftest function
library(tseries) #contains adf.test function
library(tidyverse)
## Set working directory ---------------------------------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Load dataset -------------------------------------------------------------------------------------------------------
fdata <- read_excel("CarRegistrations.xls")
head(fdata)
# Order and Check for missing dates
fdata <- fdata |> arrange(Fecha)
day(fdata$Fecha) <- 01
date_range <- seq(min(fdata$Fecha), max(fdata$Fecha), by = "months")
date_range[!date_range %in% fdata$Fecha]
sum(is.na(fdata$CarReg))
# Check for duplicates
length(fdata$Fecha)
length(unique(fdata$Fecha))
# Convert to time series object
y <- ts(fdata$CarReg,start = 1960, frequency = 12)
# for daily data
autoplot(y)
## Training and validation ------------------------------------------------------------
y.TR <- subset(y, end = length(y)-5*12) #Leave 5 years for validation
y.TV <- subset(y, start = length(y)-5*12+1)
## Identification and fitting frocess -------------------------------------------------------------------------------------------------------
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
# Box-Cox transformation
Lambda <- BoxCox.lambda.plot(y.TR, window.width = 12)
# Lambda <- BoxCox.lambda(y) #other option
z <- BoxCox(y.TR,Lambda)
autoplot(z) + autolayer(y)
# Differentiation: if the ACF decreases very slowly -> needs differenciation
ggtsdisplay(z,lag.max = 100)
# Seasonal Differentiation
B12z<- diff(z, lag = 12, differences = 1)
ggtsdisplay(B12z,lag.max = 4*12) #differences contains the order of differentiation
# Regular Differentiation
Bz <- diff(z,differences = 1)
ggtsdisplay(Bz, lag.max = 4*12) #differences contains the order of differentiation
# Regular & Seasonal Differentiation
B12Bz <- diff(Bz, lag = 12, differences = 1)
ggtsdisplay(B12Bz, lag.max = 4 * 12)
# Order does not matter
B_B12z<- diff(B12z, differences = 1)
autoplot(B12Bz, color = "blue", size = 2) + autolayer(B_B12z, color = "orange", size = 0.5)
# Fit seasonal model with estimated order
arima.fit <- Arima(y.TR,
order=c(0, 1, 1),
seasonal = list(order=c(0, 1, 1), period=12),
lambda = Lambda,
include.constant = FALSE)
summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=100)
# If residuals are not white noise, change order of ARMA
ggtsdisplay(residuals(arima.fit),lag.max = 100)
# Check fitted
autoplot(y.TR, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
# ---------------------
auto.arima(y.TR,trace=TRUE)
fdata<-read.csv("C:/Users/javie/Desktop/Tercero/Analisis/Exams/data/fdata18.csv")
head(fdata)
TT <- 12
y <- ts(fdata, frequency = TT)[, 1]
head(y)
ggtsdisplay(y,lag.max = 50)
y.TR <- subset(y, end = 541)
y.TV <- subset(y, start = 541)
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
ggtsdisplay(y.TR,lag.max = 50)
Lambda <- BoxCox.lambda.plot(y.TR,TT)
z <- BoxCox(y.TR,Lambda)
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
ggtsdisplay(y.TR,lag.max = 50)
Lambda <- BoxCox.lambda.plot(y.TR,TT)
z.sdiff <- diff(y,lag=TT,differences = 1)
ggtsdisplay(z.sdiff,lag.max = 100) #differences contains the order of differentiation
ggtsdisplay(z.sdiff,lag.max = 100) #differences contains the order of differentiation
z.rdiff <- diff(y.TR, differences = 1)
ggtsdisplay(z.rdiff,lag.max = 100)
z.rdiff.sdiff <- diff(z.rdiff,lag=TT,differences = 1)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
arima.fit <- Arima(y.TR,
order=c(1,1,1),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
ggtsdisplay(residuals(arima.fit),lag.max = 100)
autoplot(y.TR, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
ggtsdisplay(residuals(arima.fit),lag.max = 100)
ggtsdisplay(residuals(arima.fit),lag.max = 1000)
autoplot(y.TR, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
# If residuals are not white noise, change order of ARMA
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Check fitted forecast
autoplot(y, series = "Real") +
forecast::autolayer(arima.fit$fitted, series = "Fitted")
library(MLTools)
library(fpp2)
library(tidyverse)
library(readxl)
library(lmtest) #contains coeftest function
## Set working directory ---------------------------------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Load dataset -------------------------------------------------------------------------------------------------------
fdata <- read_excel("ARMA_series.xls")
# Convert to time series object
fdata_ts <- ts(fdata)
head(fdata_ts)
# index to select a time series
y <- fdata_ts[ ,2]
# ACF and PACF of the time series -> identify significant lags and order
ggtsdisplay(y, lag.max = 20)
# Fit model with estimated order
arima.fit <- Arima(y, order=c(1,0,1), include.mean = TRUE)
summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=20)
# If residuals are not white noise, change order of ARMA
ggtsdisplay(residuals(arima.fit), lag.max = 20)
# Check fitted forecast
autoplot(y, series = "Real") +
forecast::autolayer(arima.fit$fitted, series = "Fitted")
#Perform future forecast
y_est <- forecast::forecast(arima.fit, h=5)
autoplot(y_est)
## Simulate ARMA time series -------------------------------------------------------------------------------------------------------
sim_ts <- arima.sim(n = 250,
list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
y_est <- forecast::forecast(arima.fit, h=5)
autoplot(y_est)
sim_ts <- arima.sim(n = 250,
list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
autoplot(sims_ts)
autoplot(sim_ts)
sim_ts <- arima.sim(n = 1000,
list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
autoplot(sim_ts)
sim_ts <- arima.sim(n = 600,
list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
autoplot(sim_ts)
y_est <- forecast::forecast(arima.fit, h=1)
autoplot(y_est)
library(MLTools)
library(fpp2)
library(ggplot2)
library(readxl)
library(lmtest)  #contains coeftest function
library(tseries) #contains adf.test function
library(tidyverse)
fdata<-read.csv("C:/Users/javie/Desktop/Tercero/Analisis/Exams/data/fdata18.csv")
head(fdata)
TT <- 12
y <- ts(fdata, frequency = TT)[, 1]
head(y)
ggtsdisplay(y,lag.max = 50)
y.TR <- subset(y, end = 541)
y.TV <- subset(y, start = 541)
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
ggtsdisplay(y.TR,lag.max = 50)
Lambda <- BoxCox.lambda.plot(y.TR,TT)
z <- BoxCox(y.TR,Lambda)
ggtsdisplay(z,lag.max = 100)
z.sdiff <- diff(y.TR,lag=TT,differences = 1)
ggtsdisplay(z.sdiff,lag.max = 100) #differences contains the order of differentiation
z.rdiff <- diff(y.TR, differences = 1)
ggtsdisplay(z.rdiff,lag.max = 100)
z.rdiff.sdiff <- diff(z.rdiff,lag=TT,differences = 1)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
arima.fit <- Arima(y.TR,
order=c(1,1,1),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
ggtsdisplay(residuals(arima.fit),lag.max = 1000)
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
# -------------------------------------------------------------------------------
y_dec_add <- decompose(z,type="multiplicative")
autoplot(y_dec_add) + xlab("Month") +
ggtitle("Classical additive decomposition")
z.sdiff <- diff(z,lag=TT,differences = 1)
library(MLTools)
library(fpp2)
library(ggplot2)
library(readxl)
library(lmtest)  #contains coeftest function
library(tseries) #contains adf.test function
library(tidyverse)
fdata<-read.csv("C:/Users/javie/Desktop/Tercero/Analisis/Exams/data/fdata18.csv")
head(fdata)
TT <- 12
y <- ts(fdata, frequency = TT)[, 1]
head(y)
ggtsdisplay(y,lag.max = 50)
y.TR <- subset(y, end = 541)
y.TV <- subset(y, start = 541)
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
ggtsdisplay(y.TR,lag.max = 50)
Lambda <- BoxCox.lambda.plot(y.TR,TT)
z <- BoxCox(y.TR,Lambda)
ggtsdisplay(z,lag.max = 100)
z.sdiff <- diff(z,lag=TT,differences = 1)
ggtsdisplay(z.sdiff,lag.max = 100) #differences contains the order of differentiation
z.rdiff <- diff(z, differences = 1)
ggtsdisplay(z.rdiff,lag.max = 100)
z.rdiff.sdiff <- diff(z.rdiff,lag=TT,differences = 1)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
arima.fit <- Arima(y.TR,
order=c(1,1,1),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
ggtsdisplay(residuals(arima.fit),lag.max = 1000)
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
y_est <- forecast::forecast(arima.fit, h=1)
autoplot(y_est)
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
install.packages("gridExtra")
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
fdata<-read.csv("C:/Users/javie/Desktop/Tercero/Analisis/Exams/data/fdata18.csv")
head(fdata)
TT <- 12
y <- ts(fdata, frequency = TT)[, 1]
head(y)
ggtsdisplay(y,lag.max = 50)
fdata18.csv
fdata<-read.csv("C:/Users/javie/Desktop/Tercero/Analisis/Exams/data/fdata18.csv")
head(fdata)
TT <- 12
y <- ts(fdata, frequency = TT)[, 1]
head(y)
ggtsdisplay(y,lag.max = 50)
y.TR <- subset(y, end = 541)
y.TV <- subset(y, start = 541)
autoplot(y.TR, color = "orange") +
autolayer(y.TV, color = "blue")
ggtsdisplay(y.TR,lag.max = 50)
Lambda <- BoxCox.lambda.plot(y.TR,TT)
z <- BoxCox(y.TR,Lambda)
ggtsdisplay(z,lag.max = 100)
z.sdiff <- diff(z,lag=TT,differences = 1)
ggtsdisplay(z.sdiff,lag.max = 100) #differences contains the order of differentiation
z.rdiff <- diff(z, differences = 1)
ggtsdisplay(z.rdiff,lag.max = 100)
z.rdiff.sdiff <- diff(z.rdiff,lag=TT,differences = 1)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
arima.fit <- Arima(y.TR,
order=c(0,1,0),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit),lag.max = 1000)
arima.fit <- Arima(y.TR,
order=c(1,1,0),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit),lag.max = 1000)
arima.fit <- Arima(y.TR,
order=c(1,1,1),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit),lag.max = 1000)
# ---------------------
auto.arima(y.TR,trace=TRUE)
arima.fit <- Arima(y.TR,
order=c(1,1,1),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
ggtsdisplay(residuals(arima.fit),lag.max = 1000)
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
arima.fit <- Arima(y.TR,
order=c(0,1,0),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
y_est <- forecast::forecast(arima.fit, h=1)
autoplot(y_est)
y_est <- forecast::forecast(arima.fit, h=10)
autoplot(y_est)
autoplot(y.TR, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
y_est <- forecast::forecast(arima.fit, h=10)
autoplot(y_est)
y.TV.est <- y * NA
for (i in seq(length(y.TR) + 1, length(y), 1)){# loop for validation period
y.TV.est[i] <- forecast(subset(y, end=i-1), # y series up to sample i
model = arima.fit,       # Model trained (Also valid for exponential smoothing models)
h=1)$mean                # h is the forecast horizon
}
head(y.TV.est, 48)
na.omit(y.TV.est)
#Plot series and forecast
autoplot(y) +
forecast::autolayer(y.TV.est)
#Compute validation errors
accuracy(y.TV.est, y)
# -------------------------------------------------------------------------------
y_dec_add <- decompose(z,type="multiplicative")
autoplot(y_dec_add) + xlab("Month") +
ggtitle("Classical additive decomposition")
# -------------------------------------------------------------------------------
y_dec_add <- decompose(z,type="additive")
autoplot(y_dec_add) + xlab("Month") +
ggtitle("Classical additive decomposition")
# -------------------------------------------------------------------------------
y_dec_add <- decompose(z,type="multiplicative")
autoplot(y_dec_add) + xlab("Month") +
ggtitle("Classical additive decomposition")
additive
additive
# -------------------------------------------------------------------------------
y_dec_add <- decompose(z,type="additive")
autoplot(y_dec_add) + xlab("Month") +
ggtitle("Classical additive decomposition")
zd <- seasonal(y_dec_add)
ggtsdisplay(zd)
zd.sdiff <- diff(zd,lag=TT,differences = 1)
ggtsdisplay(z.sdiff,lag.max = 100)
zd.rdiff.sdiff <- diff(zd.sdiff,differences = 1)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
arima.fit <- Arima(zd,
order=c(0,0,0),
seasonal = list(order=c(1,1,0), period=TT),
lambda = Lambda)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(0,1,1), period=TT),
lambda = Lambda)
arima.fit <- Arima(zd,
order=c(0,0,0),
seasonal = list(order=c(0,1,1), period=TT),
lambda = Lambda)
arima.fit <- Arima(zd,
order=c(0,0,0),
seasonal = list(order=c(0,0,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
arima.fit <- Arima(zd,
order=c(0,1,0),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=120)
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
auto.arima(zd)
arima.fit <- Arima(zd,
order=c(0,0,0),
seasonal = list(order=c(0,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(0,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(0,1,1), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(0,0,1), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(1,0,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(1,0,1), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
zd.rdiff <- diff(zd.sdiff,differences = 1)
ggtsdisplay(z.rdiff,lag.max = 100)
zd.rdiff.sdiff <- diff(zd.sdiff,differences = 1)
ggtsdisplay(z.rdiff.sdiff,lag.max = 100)
auto.arima(zd)
arima.fit <- Arima(zd,
order=c(0,1,0),
seasonal = list(order=c(1,0,1), period=TT),
lambda = Lambda)
arima.fit <- Arima(zd,
order=c(0,0,0),
seasonal = list(order=c(0,1,0), period=TT),
lambda = Lambda)
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
ggtsdisplay(residuals(arima.fit),lag.max = 1000)
CheckResiduals.ICAI(arima.fit, bins = 100, lag=24)
